@page
@model aspnetapp.Pages.Account.LecturerModel
@{
}

<body>
    <form method="post">
        <div>
            <h2>Name:</h2>
            <label for="title_before">Title before:</label>
            <input name="title_before" id="title_before" type="text" value="@Model.Lecturer.title_before" /><br />
            <label for="first_name">First name*:</label>
            <input name="first_name" id="first_name" type="text" value="@Model.Lecturer.first_name" required /><br />
            <label for="middle_name">Middle before:</label>
            <input name="middle_name" id="middle_name" type="text" value="@Model.Lecturer.middle_name" /><br />
            <label for="last_name">Last name*:</label>
            <input name="last_name" id="last_name" type="text" value="@Model.Lecturer.last_name" required /><br />
            <label for="title_after">Title after:</label>
            <input name="title_after" id="title_after" type="text" value="@Model.Lecturer.title_after" />
        </div>
        <div>
            <h2>Lorem ipsum</h2>
            <label for="picture_url">Url to your pfp:</label>
            <input name="picture_url" id="picture_url" type="text" value="@Model.Lecturer.picture_url" /><br />
            <label for="location">Location:</label>
            <input name="location" id="location" type="text" value="@Model.Lecturer.location" /><br />
            <label for="claim">Claim:</label>
            <input name="claim" id="claim" type="text" value="@Model.Lecturer.claim" /><br />
            <label for="bio">Bio:</label>
            <input name="bio" id="bio" type="text" value="@Model.Lecturer.bio" /><br />
            <label for="tags">Tags (seperated by ,):</label>
            <input name="tags" id="tags" type="text" value="@Model.Lecturer.TagsToString()" /><br />
            <label for="price_per_hour">Price per hour:</label>
            <input name="price_per_hour" id="price_per_hour" type="number" min="0" value="@Model.Lecturer.price_per_hour" />
        </div>
        <div>
            <h2>Contact</h2>
            <h3>Email(s)*</h3>
            <div>
                <label for="add_email_inp">Email:</label>
                <input id="add_email_inp" type="email" />
                <button type="button" id="add_email_btn">Add</button>
                <div id="email_container"></div>
            </div>
            <h3>Telephone number(s)*</h3>
            <div>
                <label for="add_pn_inp">Phone number:</label>
                <input id="add_pn_inp" type="tel" />
                <button type="button" id="add_pn_btn">Add</button>
                <div id="pn_container"></div>
            </div>
        </div>
        <button type="button" onclick="window.location.replace('./')">Cancel</button>
        <input type="submit" value="Save" />
    </form>

    <script>
        let emails = new Set();
        let phones = new Set();

        document.addEventListener("DOMContentLoaded", function () {
            const emailInput = document.getElementById('add_email_inp');
            const addEmailBtn = document.getElementById('add_email_btn');
            const emailContainer = document.getElementById('email_container');

            const phoneInput = document.getElementById('add_pn_inp');
            const addPhoneBtn = document.getElementById('add_pn_btn');
            const phoneContainer = document.getElementById('pn_container');

            @{
                if (Model.Lecturer.contact.emails is not null)
                    foreach (string email in Model.Lecturer.contact.emails)
                    {
                        <text>
                            addEmail("@Html.Raw(email)");
                        </text>
                    }

                if (Model.Lecturer.contact.telephone_numbers is not null)
                    foreach (string phone in Model.Lecturer.contact.telephone_numbers)
                    {
                        <text>
                            addPhone("@Html.Raw(phone)");
                        </text>
                    }
            }

            addPhoneBtn.addEventListener('click', function () {
                const phone = phoneInput.value.trim();

                addPhone(phone);
            });

            phoneInput.addEventListener('keypress', function (event) {
                if (event.key === 'Enter') {
                    addPhoneBtn.click();
                    event.preventDefault(); // Prevent form submission
                }
            });

            function addPhone(phone) {
                if (phones.has(phone)) {
                    alert('Can\'t add one phone number twice.');
                    return;
                }
                phones.add(phone);
                const phoneItem = document.createElement('div');
                //phoneItem.classList.add('phone-item');
                phoneItem.innerHTML = `${phone} <button class="deleteBtn">X</button><input type="hidden" name="phone" value="${phone} ">`;
                phoneContainer.appendChild(phoneItem);

                const deleteBtn = phoneItem.querySelector('.deleteBtn');
                deleteBtn.addEventListener('click', function () {
                    phoneContainer.removeChild(phoneItem);
                    phones.delete(phone);
                });
                phoneInput.value = '';
            }

            addEmailBtn.addEventListener('click', function () {
                const email = emailInput.value.trim();

                if (validateEmail(email)) {
                    addEmail(email);
                } else {
                    alert('Please enter a valid email address.');
                }
            });

            emailInput.addEventListener('keypress', function (event) {
                if (event.key === 'Enter') {
                    addEmailBtn.click();
                    event.preventDefault(); // Prevent form submission
                }
            });

            function validateEmail(email) {
                const regex = new RegExp("(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])")
                return regex.test(email);
            }

            function addEmail(email) {
                if (emails.has(email)) {
                    alert('Can\'t add one email twice.');
                    return;
                }
                emails.add(email);
                const emailItem = document.createElement('div');
                //emailItem.classList.add('email-item');
                emailItem.innerHTML = `${email} <button class="deleteBtn">X</button><input type="hidden" name="email" value="${email} ">`;
                emailContainer.appendChild(emailItem);

                const deleteBtn = emailItem.querySelector('.deleteBtn');
                deleteBtn.addEventListener('click', function () {
                    emailContainer.removeChild(emailItem);
                    emails.delete(email);
                });
                emailInput.value = '';
            }

            @{
                // show error
                if (!string.IsNullOrEmpty(Model.Error))
                {
                    <text>
                        alert("Error: @Model.Error");
                    </text>
                }
            }
        });
    </script>
</body>