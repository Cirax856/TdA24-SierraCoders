@page
@using aspnetapp.Models.Schedule
@model aspnetapp.Pages.Account.Schedule.AddModel
@{
    ScheduleInfo info = Database.GetSchedule(Model.Account.LecturerGuid);
}

<link rel="stylesheet" href="add.css" />

<body>
    <h1>Add week preset</h1>
    <div>
        <label for="preset_name_inp">Preset name:</label>
        <input id="preset_name_inp" type="text" name="preset_name" />
        <div>
            <label for="from_inp">From:</label>
            <input id="from_inp" type="time" name="from_time" onchange="ensureFromTo()" min="05:00" max="22:59" value="07:00" required />
            <label for="to_inp">To:</label>
            <input id="to_inp" type="time" name="to_time" onchange="ensureFromTo()" min="05:01" max="23:00" value="16:00" />
        </div>
        <div id="week_container">
            <div class="dday" onmouseup="acceptDrop('mon_div', 0)">
                <div class="dayInfo">MON</div>
                <div class="day" id="mon_div"></div>
            </div>
            <div class="dday" onmouseup="acceptDrop('tue_div', 1)">
                <div class="dayInfo">TUE</div>
                <div class="day" id="tue_div"></div>
            </div>
            <div class="dday" onmouseup="acceptDrop('wed_div', 2)">
                <div class="dayInfo">WED</div>
                <div class="day" id="wed_div"></div>
            </div>
            <div class="dday" onmouseup="acceptDrop('thu_div', 3)">
                <div class="dayInfo">THU</div>
                <div class="day" id="thu_div"></div>
            </div>
            <div class="dday" onmouseup="acceptDrop('fri_div', 4)">
                <div class="dayInfo">FRI</div>
                <div class="day" id="fri_div"></div>
            </div>
            <div class="dday" onmouseup="acceptDrop('sat_div', 5)">
                <div class="dayInfo">SAT</div>
                <div class="day" id="sat_div"></div>
            </div>
            <div class="dday" onmouseup="acceptDrop('sun_div', 6)">
                <div class="dayInfo">SUN</div>
                <div class="day" id="sun_div"></div>
            </div>
        </div>
    </div>
    <div>
        <h2>Subjects:</h2>
        <div>
            <h3>Add Subject</h3>
            <label for="add_name_inp">Name:</label>
            <input id="add_name_inp" type="text" minLength="1" maxlength="4" />
            <label for="add_decs_inp">Description:</label>
            <input id="add_decs_inp" type="text" minLength="0" maxlength="30" />
            <button type="button" onclick="addSubjectFromInp()">Add</buttont>
        </div>
        <div id="subject_container">
            @{
                int i = 0;
                foreach (Subject subject in info.Subjects)
                {
                    string lowerName = subject.Name.ToLowerInvariant();
                    <div id="subject_@lowerName" onmousedown="startDrag('subject_@lowerName', [ '@lowerName', '@subject.Description' ])">
                        <p>@subject.Name</p>
                        <p>@subject.Description</p>
                    </div>
                    i++;
                }
            }
        </div>
    </div>
    <script>
        var subjects = new Set([["None", ""], @Html.Raw(string.Join(", ", info.Subjects.Select(subject => $"[ \"{subject.Name.ToLowerInvariant()}\", \"{subject.Description}\" ]"))) ]);

        // [name, description, length in minutes]
        var schedule = [[], [], [], [], [], [], []];

        var dayContainerIDs = [
            "mon_div",
            "tue_div",
            "wed_div",
            "thu_div",
            "fri_div",
            "sat_div",
            "sun_div"
        ];

        var addNameInp;
        var addDescInp;
        var subjectContainer;

        var fromTimeInp;
        var toTimeInp;

        var dragging = false;
        var dragObject;
        var dragInfo;

        function ensureFromTo() {
            var fromSplit = fromTimeInp.value.split(':');
            var from = parseInt(fromSplit[0]) * 60 + parseInt(fromSplit[1]);
            var toSplit = toTimeInp.value.split(':');
            var to = parseInt(toSplit[0]) * 60 + parseInt(toSplit[1]);
            var longest = calculateLongestDay();

            from = Math.max(from, 5 * 60);
            to = Math.min(to, 23 * 60);

            if (from + longest >= to) {
                to = Math.min(from + longest + 1, 23 * 60);
                var diff = to - (from + longest + 1);
                // push back from if to hit bounds
                from += diff;
            }

            fromTimeInp.value = minutesToTime(from);
            toTimeInp.value = minutesToTime(to);

            updateLengths();
        }
        function calculateLongestDay() {
            var length = 0;
            for (var i = 0; i < schedule.length; i++) {
                var l = 0;
                for (var j = 0; j < schedule[i].length; j++)
                    l += schedule[i][j][2];

                length = Math.max(length, l);
            }

            return length;
        }
        function updateLengths() {
            var scheduleLength = calculateScheduleLength();
            for (var i = 0; i < dayContainerIDs.length; i++) {
                var k = 0;
                const container = document.getElementById(dayContainerIDs[i]);
                for (var j = 0; j < container.children.length; j++) {
                    var child = container.children[j];
                    if (child != undefined && child.id === "inSchSubj") {
                        udateLength(child, schedule[i][k][2], scheduleLength);
                        k++;
                    }
                }
            }
        }
        function calculateScheduleLength() {
            var fromSplit = fromTimeInp.value.split(':');
            var from = parseInt(fromSplit[0]) * 60 + parseInt(fromSplit[1]);
            var toSplit = toTimeInp.value.split(':');
            var to = parseInt(toSplit[0]) * 60 + parseInt(toSplit[1]);

            return to - from;
        }
        function udateLength(element, minutes, scheduleLength) {
            if (scheduleLength == undefined)
                scheduleLength = calculateScheduleLength();

            var length = (minutes / scheduleLength) * 100.0;
            element.style.width = length + "%";
        }

        function acceptDrop(myId, dayId) {
            if (!dragging) return;

            var currentLength = 0;
            for (var i = 0; i < schedule[dayId].length; i++)
                currentLength += schedule[dayId][i][2];

            const maxTime = 1080;
            var time = 45;
            if (currentLength + 45 >= maxTime) {
                if (currentLength + 5 >= maxTime) {
                    alert("Not enought time in this day, remove some subjects before adding more");
                    dragging = false;
                    dragObject.remove();
                    dragInfo = null;
                } else
                    time = maxTime - currentLength - 1;
            }

            var div = document.getElementById(myId);
            var day = myId.split('_')[0];

            schedule[dayId].push([dragInfo[0], dragInfo[1], time]);

            dragging = false;
            dragObject.id = "inSchSubj";
            dragObject.style = "";
            dragObject.className = "inSchSubj"
            dragObject.style.backgroundColor = stringToColor(dragInfo[0]);

            var delBtn = document.createElement("button");
            delBtn.innerHTML = "DEL";
            var j = schedule[dayId].length - 1;
            delBtn.onclick = function () {
                removeHour(dayId, j);
            }

            dragObject.appendChild(delBtn);

            div.appendChild(dragObject);

            ensureFromTo();
            //udateLength(dragObject, time);
        }
        function removeHour(dayIndex, hourIndex) {
            schedule[dayIndex].splice(hourIndex, 1);
            document.getElementById(dayContainerIDs[dayIndex]).children[hourIndex].remove();
        }

        function startDrag(objId, info) {
            if (dragging) {
                console.log("something went wrong dragging: true");
                return;
            }

            dragging = true;
            dragObject = document.getElementById(objId).cloneNode(true);
            dragObject.id = "drag_object";
            dragObject.style.position = "absolute";
            document.body.appendChild(dragObject);
            dragInfo = info;
        }

        async function addSubjectFromInp() {
            if (await addSubject(addNameInp.value, addDescInp.value, true)) {
                addNameInp.value = "";
                addDescInp.value = "";
                return true;
            } else
                return false;
        }
        async function addSubject(name, desc, popup) {
            var err = null;
            if (name.length < 1 || name.length > 4)
                err = "Name must be between 1-4 characters";
            else if (desc.length > 30)
                err = "Description must be between 0-30 characters";
            else if (set_some(subjects, array => array[0] === name.toLowerCase()))
                err = `There already is a subject with the name '${name}'`;

            if (err !== null) {
                if (popup)
                    alert(err);

                return false;
            } else {
                var response;
                try {
                    response = await fetch("/api/subject/add", { method: "PUT", body: JSON.stringify({ "name": name.toLowerCase(), "desc": desc }) });
                } catch (error) {
                    if (popup)
                        alert("There was an error adding the subject: " + error);

                    return false;
                }

                if (!response.ok) {
                    if (popup)
                        alert("Error: " + response.body);

                    return false;
                }

                addSubjectElement(name, desc);

                subjects.add([name.toLowerCase(), desc]);

                return true;
            }
        }
        function addSubjectElement(name, desc) {

            var div = document.createElement("div");
            var pName = document.createElement("p");
            var pDesc = document.createElement("p");

            pName.innerText = name;
            pDesc.innerText = desc;

            div.appendChild(pName);
            div.appendChild(pDesc);

            name = name.toLowerCase();

            div.id = `subject_${name}`;
            div.onmousedown = function () {
                startDrag(`subject_${name}`, [name, desc]);
            };
            div.style.backgroundColor = stringToColor(name);

            subjectContainer.appendChild(div);
        }

        document.addEventListener("DOMContentLoaded", function () {
            addNameInp = document.getElementById("add_name_inp");
            addDescInp = document.getElementById("add_decs_inp");
            subjectContainer = document.getElementById("subject_container");

            fromTimeInp = document.getElementById("from_inp");
            toTimeInp = document.getElementById("to_inp");

            addSubjectElement("None", "");

            document.addEventListener('mousemove', function (e) {
                var x = e.clientX;
                var y = e.clientY;

                if (dragging) {
                    dragObject.style.left = x + 15 + 'px';
                    dragObject.style.top = y + 10 + 'px';
                }
            });

            document.addEventListener('mouseup', function (event) {
                if (!dragging) return;

                dragging = false;
                dragObject.remove();
                dragInfo = null;
            });
        });
    </script>
</body>